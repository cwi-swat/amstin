
grammar MetaModel is MetaModel
where
  MetaModel ::= "metamodel" name:id classes:Class* "end"

  Class ::= isAbstract:"abstract"? "class" name:key parent:Parent? fields:Field* "end"
  
  Field ::= [Field] name:key ":" type:Type mult:Mult inverse:Inverse
  
  Type ::= [Int] "int"
  		| [Bool] "bool"
  		| [Str] "str"

  // How to avoid the superfluous Klass here?
  // the fact that Class is referenced is actually
  // relevant when Type is reference (e.g. in Field)

  		| [Klass] klass:Class^
  
  
  
  // todo? detect enums here
  Mult ::= [Star] "*" | [Opt] "?" | [Single]
  
  Inverse ::= [Other] "(" "<-" other:Field^ ")" | [None]
  
  Parent ::= "<" type:Class^
end