Checking SchemaSchema
KLASS: Checking <Schema 1> against Schema
FIELD: name, SchemaSchema
THIS.Type: str
FIELD: classes, {"Schema"=><Klass 5>, "Klass"=><Klass 7>, "Primitive"=><Klass 9>, "Type"=><Klass 11>, "Field"=><Klass 17>}
THIS.Type: Klass
KLASS: Checking {"Schema"=><Klass 5>, "Klass"=><Klass 7>, "Primitive"=><Klass 9>, "Type"=><Klass 11>, "Field"=><Klass 17>} against Klass
KLASS: Checking <Klass 5> against Klass
FIELD: schema, <Schema 1>
THIS.Type: Schema
FIELD: name, Schema
THIS.Type: str
FIELD: super, 
FIELD: subtypes, []
FIELD: fields, {"name"=><Field 6>, "classes"=><Field 8>, "primitives"=><Field 10>}
THIS.Type: Field
KLASS: Checking {"name"=><Field 6>, "classes"=><Field 8>, "primitives"=><Field 10>} against Field
KLASS: Checking <Field 6> against Field
FIELD: owner, <Klass 5>
THIS.Type: Klass
FIELD: name, name
THIS.Type: str
FIELD: type, <Primitive 2>
THIS.Type: Type
KLASS: Checking <Primitive 2> against Type
FIELD: optional, false
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
FIELD: inverse, 
KLASS: Checking <Field 8> against Field
FIELD: name, classes
THIS.Type: str
FIELD: type, <Klass 7>
THIS.Type: Type
KLASS: Checking <Klass 7> against Type
FIELD: optional, true
THIS.Type: bool
FIELD: many, true
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
FIELD: inverse, <Field 13>
THIS.Type: Field
KLASS: Checking <Field 13> against Field
FIELD: owner, <Klass 7>
THIS.Type: Klass
KLASS: Checking <Klass 7> against Klass
FIELD: name, Klass
THIS.Type: str
FIELD: super, <Klass 11>
THIS.Type: Klass
KLASS: Checking <Klass 11> against Klass
FIELD: name, Type
THIS.Type: str
FIELD: subtypes, [<Klass 9>, <Klass 7>]
THIS.Type: Klass
KLASS: Checking [<Klass 9>, <Klass 7>] against Klass
KLASS: Checking <Klass 9> against Klass
FIELD: name, Primitive
THIS.Type: str
FIELD: subtypes, []
FIELD: fields, {"name"=><Field 12>}
THIS.Type: Field
KLASS: Checking {"name"=><Field 12>} against Field
KLASS: Checking <Field 12> against Field
FIELD: owner, <Klass 9>
THIS.Type: Klass
FIELD: name, name
THIS.Type: str
FIELD: optional, false
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, true
THIS.Type: bool
FIELD: fields, {}
THIS.Type: Field
KLASS: Checking {} against Field
FIELD: subtypes, []
FIELD: fields, {"schema"=><Field 13>, "name"=><Field 14>, "super"=><Field 15>, "subtypes"=><Field 16>, "fields"=><Field 18>}
THIS.Type: Field
KLASS: Checking {"schema"=><Field 13>, "name"=><Field 14>, "super"=><Field 15>, "subtypes"=><Field 16>, "fields"=><Field 18>} against Field
KLASS: Checking <Field 14> against Field
FIELD: name, name
THIS.Type: str
FIELD: optional, false
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, true
THIS.Type: bool
KLASS: Checking <Field 15> against Field
FIELD: name, super
THIS.Type: str
FIELD: optional, true
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
FIELD: inverse, <Field 16>
THIS.Type: Field
KLASS: Checking <Field 16> against Field
FIELD: name, subtypes
THIS.Type: str
FIELD: optional, true
THIS.Type: bool
FIELD: many, true
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
FIELD: inverse, <Field 15>
THIS.Type: Field
KLASS: Checking <Field 18> against Field
FIELD: name, fields
THIS.Type: str
FIELD: type, <Klass 17>
THIS.Type: Type
KLASS: Checking <Klass 17> against Type
FIELD: optional, true
THIS.Type: bool
FIELD: many, true
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
FIELD: inverse, <Field 19>
THIS.Type: Field
KLASS: Checking <Field 19> against Field
FIELD: owner, <Klass 17>
THIS.Type: Klass
KLASS: Checking <Klass 17> against Klass
FIELD: name, Field
THIS.Type: str
FIELD: subtypes, []
FIELD: fields, {"owner"=><Field 19>, "name"=><Field 20>, "type"=><Field 21>, "optional"=><Field 22>, "many"=><Field 23>, "key"=><Field 24>, "inverse"=><Field 25>}
THIS.Type: Field
KLASS: Checking {"owner"=><Field 19>, "name"=><Field 20>, "type"=><Field 21>, "optional"=><Field 22>, "many"=><Field 23>, "key"=><Field 24>, "inverse"=><Field 25>} against Field
KLASS: Checking <Field 20> against Field
FIELD: name, name
THIS.Type: str
FIELD: optional, false
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, true
THIS.Type: bool
KLASS: Checking <Field 21> against Field
FIELD: name, type
THIS.Type: str
FIELD: type, <Klass 11>
THIS.Type: Type
KLASS: Checking <Klass 11> against Type
FIELD: optional, false
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
KLASS: Checking <Field 22> against Field
FIELD: name, optional
THIS.Type: str
FIELD: type, <Primitive 4>
THIS.Type: Type
KLASS: Checking <Primitive 4> against Type
FIELD: optional, false
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
KLASS: Checking <Field 23> against Field
FIELD: name, many
THIS.Type: str
FIELD: optional, false
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
KLASS: Checking <Field 24> against Field
FIELD: name, key
THIS.Type: str
FIELD: optional, false
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
KLASS: Checking <Field 25> against Field
FIELD: name, inverse
THIS.Type: str
FIELD: optional, true
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
FIELD: inverse, <Field 25>
THIS.Type: Field
FIELD: name, owner
THIS.Type: str
FIELD: optional, false
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, true
THIS.Type: bool
FIELD: inverse, <Field 18>
THIS.Type: Field
FIELD: name, schema
THIS.Type: str
FIELD: type, <Klass 5>
THIS.Type: Type
KLASS: Checking <Klass 5> against Type
FIELD: optional, false
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
FIELD: inverse, <Field 8>
THIS.Type: Field
KLASS: Checking <Field 10> against Field
FIELD: name, primitives
THIS.Type: str
FIELD: type, <Klass 9>
THIS.Type: Type
KLASS: Checking <Klass 9> against Type
FIELD: optional, true
THIS.Type: bool
FIELD: many, true
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
FIELD: primitives, {:str=><Primitive 2>, :int=><Primitive 3>, :bool=><Primitive 4>}
THIS.Type: Primitive
KLASS: Checking {:str=><Primitive 2>, :int=><Primitive 3>, :bool=><Primitive 4>} against Primitive
KLASS: Checking <Primitive 2> against Primitive
FIELD: name, str
THIS.Type: str
KLASS: Checking <Primitive 3> against Primitive
FIELD: name, int
THIS.Type: str
KLASS: Checking <Primitive 4> against Primitive
FIELD: name, bool
THIS.Type: str
