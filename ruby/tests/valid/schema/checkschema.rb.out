Checking SchemaSchema
KLASS: Checking <Schema 1 [:name, :classes, :primitives]> against Schema
FIELD: name, SchemaSchema
THIS.Type: str
FIELD: classes, {"Schema"=><Klass 5 [:name, :fields, :subtypes, :super, :schema]>, "Klass"=><Klass 7 [:name, :fields, :subtypes, :super, :schema]>, "Primitive"=><Klass 9 [:name, :fields, :subtypes, :super, :schema]>, "Type"=><Klass 11 [:name, :fields, :subtypes, :super, :schema]>, "Field"=><Klass 17 [:name, :fields, :subtypes, :super, :schema]>}
THIS.Type: Klass
KLASS: Checking {"Schema"=><Klass 5 [:name, :fields, :subtypes, :super, :schema]>, "Klass"=><Klass 7 [:name, :fields, :subtypes, :super, :schema]>, "Primitive"=><Klass 9 [:name, :fields, :subtypes, :super, :schema]>, "Type"=><Klass 11 [:name, :fields, :subtypes, :super, :schema]>, "Field"=><Klass 17 [:name, :fields, :subtypes, :super, :schema]>} against Klass
KLASS: Checking <Klass 5 [:name, :fields, :subtypes, :super, :schema]> against Klass
FIELD: schema, <Schema 1 [:name, :classes, :primitives]>
THIS.Type: Schema
FIELD: name, Schema
THIS.Type: str
FIELD: super, 
FIELD: subtypes, []
FIELD: fields, {"name"=><Field 6 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "classes"=><Field 8 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "primitives"=><Field 10 [:name, :owner, :type, :optional, :many, :key, :inverse]>}
THIS.Type: Field
KLASS: Checking {"name"=><Field 6 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "classes"=><Field 8 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "primitives"=><Field 10 [:name, :owner, :type, :optional, :many, :key, :inverse]>} against Field
KLASS: Checking <Field 6 [:name, :owner, :type, :optional, :many, :key, :inverse]> against Field
FIELD: owner, <Klass 5 [:name, :fields, :subtypes, :super, :schema]>
THIS.Type: Klass
FIELD: name, name
THIS.Type: str
FIELD: type, <Primitive 2 [:name]>
THIS.Type: Type
KLASS: Checking <Primitive 2 [:name]> against Type
FIELD: optional, false
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
FIELD: inverse, 
KLASS: Checking <Field 8 [:name, :owner, :type, :optional, :many, :key, :inverse]> against Field
FIELD: name, classes
THIS.Type: str
FIELD: type, <Klass 7 [:name, :fields, :subtypes, :super, :schema]>
THIS.Type: Type
KLASS: Checking <Klass 7 [:name, :fields, :subtypes, :super, :schema]> against Type
FIELD: optional, true
THIS.Type: bool
FIELD: many, true
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
FIELD: inverse, <Field 13 [:name, :owner, :type, :optional, :many, :key, :inverse]>
THIS.Type: Field
KLASS: Checking <Field 13 [:name, :owner, :type, :optional, :many, :key, :inverse]> against Field
FIELD: owner, <Klass 7 [:name, :fields, :subtypes, :super, :schema]>
THIS.Type: Klass
KLASS: Checking <Klass 7 [:name, :fields, :subtypes, :super, :schema]> against Klass
FIELD: name, Klass
THIS.Type: str
FIELD: super, <Klass 11 [:name, :fields, :subtypes, :super, :schema]>
THIS.Type: Klass
KLASS: Checking <Klass 11 [:name, :fields, :subtypes, :super, :schema]> against Klass
FIELD: name, Type
THIS.Type: str
FIELD: subtypes, [<Klass 9 [:name, :fields, :subtypes, :super, :schema]>, <Klass 7 [:name, :fields, :subtypes, :super, :schema]>]
THIS.Type: Klass
KLASS: Checking [<Klass 9 [:name, :fields, :subtypes, :super, :schema]>, <Klass 7 [:name, :fields, :subtypes, :super, :schema]>] against Klass
KLASS: Checking <Klass 9 [:name, :fields, :subtypes, :super, :schema]> against Klass
FIELD: name, Primitive
THIS.Type: str
FIELD: subtypes, []
FIELD: fields, {"name"=><Field 12 [:name, :owner, :type, :optional, :many, :key, :inverse]>}
THIS.Type: Field
KLASS: Checking {"name"=><Field 12 [:name, :owner, :type, :optional, :many, :key, :inverse]>} against Field
KLASS: Checking <Field 12 [:name, :owner, :type, :optional, :many, :key, :inverse]> against Field
FIELD: owner, <Klass 9 [:name, :fields, :subtypes, :super, :schema]>
THIS.Type: Klass
FIELD: name, name
THIS.Type: str
FIELD: optional, false
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
FIELD: fields, {}
THIS.Type: Field
KLASS: Checking {} against Field
FIELD: subtypes, []
FIELD: fields, {"schema"=><Field 13 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "name"=><Field 14 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "super"=><Field 15 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "subtypes"=><Field 16 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "fields"=><Field 18 [:name, :owner, :type, :optional, :many, :key, :inverse]>}
THIS.Type: Field
KLASS: Checking {"schema"=><Field 13 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "name"=><Field 14 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "super"=><Field 15 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "subtypes"=><Field 16 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "fields"=><Field 18 [:name, :owner, :type, :optional, :many, :key, :inverse]>} against Field
KLASS: Checking <Field 14 [:name, :owner, :type, :optional, :many, :key, :inverse]> against Field
FIELD: name, name
THIS.Type: str
FIELD: optional, false
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, true
THIS.Type: bool
KLASS: Checking <Field 15 [:name, :owner, :type, :optional, :many, :key, :inverse]> against Field
FIELD: name, super
THIS.Type: str
FIELD: optional, true
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
FIELD: inverse, <Field 16 [:name, :owner, :type, :optional, :many, :key, :inverse]>
THIS.Type: Field
KLASS: Checking <Field 16 [:name, :owner, :type, :optional, :many, :key, :inverse]> against Field
FIELD: name, subtypes
THIS.Type: str
FIELD: optional, true
THIS.Type: bool
FIELD: many, true
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
FIELD: inverse, <Field 15 [:name, :owner, :type, :optional, :many, :key, :inverse]>
THIS.Type: Field
KLASS: Checking <Field 18 [:name, :owner, :type, :optional, :many, :key, :inverse]> against Field
FIELD: name, fields
THIS.Type: str
FIELD: type, <Klass 17 [:name, :fields, :subtypes, :super, :schema]>
THIS.Type: Type
KLASS: Checking <Klass 17 [:name, :fields, :subtypes, :super, :schema]> against Type
FIELD: optional, true
THIS.Type: bool
FIELD: many, true
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
FIELD: inverse, <Field 19 [:name, :owner, :type, :optional, :many, :key, :inverse]>
THIS.Type: Field
KLASS: Checking <Field 19 [:name, :owner, :type, :optional, :many, :key, :inverse]> against Field
FIELD: owner, <Klass 17 [:name, :fields, :subtypes, :super, :schema]>
THIS.Type: Klass
KLASS: Checking <Klass 17 [:name, :fields, :subtypes, :super, :schema]> against Klass
FIELD: name, Field
THIS.Type: str
FIELD: subtypes, []
FIELD: fields, {"owner"=><Field 19 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "name"=><Field 20 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "type"=><Field 21 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "optional"=><Field 22 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "many"=><Field 23 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "key"=><Field 24 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "inverse"=><Field 25 [:name, :owner, :type, :optional, :many, :key, :inverse]>}
THIS.Type: Field
KLASS: Checking {"owner"=><Field 19 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "name"=><Field 20 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "type"=><Field 21 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "optional"=><Field 22 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "many"=><Field 23 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "key"=><Field 24 [:name, :owner, :type, :optional, :many, :key, :inverse]>, "inverse"=><Field 25 [:name, :owner, :type, :optional, :many, :key, :inverse]>} against Field
KLASS: Checking <Field 20 [:name, :owner, :type, :optional, :many, :key, :inverse]> against Field
FIELD: name, name
THIS.Type: str
FIELD: optional, false
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, true
THIS.Type: bool
KLASS: Checking <Field 21 [:name, :owner, :type, :optional, :many, :key, :inverse]> against Field
FIELD: name, type
THIS.Type: str
FIELD: type, <Klass 11 [:name, :fields, :subtypes, :super, :schema]>
THIS.Type: Type
KLASS: Checking <Klass 11 [:name, :fields, :subtypes, :super, :schema]> against Type
FIELD: optional, false
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
KLASS: Checking <Field 22 [:name, :owner, :type, :optional, :many, :key, :inverse]> against Field
FIELD: name, optional
THIS.Type: str
FIELD: type, <Primitive 4 [:name]>
THIS.Type: Type
KLASS: Checking <Primitive 4 [:name]> against Type
FIELD: optional, false
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
KLASS: Checking <Field 23 [:name, :owner, :type, :optional, :many, :key, :inverse]> against Field
FIELD: name, many
THIS.Type: str
FIELD: optional, false
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
KLASS: Checking <Field 24 [:name, :owner, :type, :optional, :many, :key, :inverse]> against Field
FIELD: name, key
THIS.Type: str
FIELD: optional, false
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
KLASS: Checking <Field 25 [:name, :owner, :type, :optional, :many, :key, :inverse]> against Field
FIELD: name, inverse
THIS.Type: str
FIELD: optional, true
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
FIELD: inverse, <Field 25 [:name, :owner, :type, :optional, :many, :key, :inverse]>
THIS.Type: Field
FIELD: name, owner
THIS.Type: str
FIELD: optional, false
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, true
THIS.Type: bool
FIELD: inverse, <Field 18 [:name, :owner, :type, :optional, :many, :key, :inverse]>
THIS.Type: Field
FIELD: name, schema
THIS.Type: str
FIELD: type, <Klass 5 [:name, :fields, :subtypes, :super, :schema]>
THIS.Type: Type
KLASS: Checking <Klass 5 [:name, :fields, :subtypes, :super, :schema]> against Type
FIELD: optional, false
THIS.Type: bool
FIELD: many, false
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
FIELD: inverse, <Field 8 [:name, :owner, :type, :optional, :many, :key, :inverse]>
THIS.Type: Field
KLASS: Checking <Field 10 [:name, :owner, :type, :optional, :many, :key, :inverse]> against Field
FIELD: name, primitives
THIS.Type: str
FIELD: type, <Klass 9 [:name, :fields, :subtypes, :super, :schema]>
THIS.Type: Type
KLASS: Checking <Klass 9 [:name, :fields, :subtypes, :super, :schema]> against Type
FIELD: optional, true
THIS.Type: bool
FIELD: many, true
THIS.Type: bool
FIELD: key, false
THIS.Type: bool
FIELD: primitives, {:str=><Primitive 2 [:name]>, :int=><Primitive 3 [:name]>, :bool=><Primitive 4 [:name]>}
THIS.Type: Primitive
KLASS: Checking {:str=><Primitive 2 [:name]>, :int=><Primitive 3 [:name]>, :bool=><Primitive 4 [:name]>} against Primitive
KLASS: Checking <Primitive 2 [:name]> against Primitive
FIELD: name, str
THIS.Type: str
KLASS: Checking <Primitive 3 [:name]> against Primitive
FIELD: name, int
THIS.Type: str
KLASS: Checking <Primitive 4 [:name]> against Primitive
FIELD: name, bool
THIS.Type: str
